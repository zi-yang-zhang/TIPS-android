buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }
}

apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'
dexcount {
    format = "json"
    includeClasses = false
    includeFieldCount = false
    includeTotalMethodCount = true
    orderByMethodCount = true
    verbose = true
    maxTreeDepth = Integer.MAX_VALUE
    teamCityIntegration = false
}

android {
    compileSdkVersion globalCompileSdkVersion
    buildToolsVersion globalBuildToolsVersion
    defaultConfig {
        applicationId "com.tips.android"
        minSdkVersion globalMinSdkVersion
        targetSdkVersion globalTargetSdkVersion
        versionCode 1
        versionName "0.1"
        buildConfigField 'String', 'ENDPOINT', '\"https://api.github.com/\"'
        // Enabling multidex support.
        multiDexEnabled true

        buildConfigField 'String', 'REALM_FILE_NAME', '\"main.realm\"'
        buildConfigField 'int', 'REALM_VERSION', '1'


    }
    signingConfigs{
        release
        debug
    }
    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor' // butterknife
        exclude 'META-INF/maven/com.squareup/javawriter/pom.xml' //Realm
        exclude 'META-INF/maven/com.squareup/javawriter/pom.properties'//Realm
    }
    compileOptions {
        sourceCompatibility globalSourceCompatibility
        targetCompatibility globalTargetCompatibility
    }
}

allprojects {
    afterEvaluate { project ->
        def signingFile = rootProject.file('keystore.properties')
        if(signingFile.exists()){
            def props = new Properties()
            props.load(new FileInputStream(signingFile))

            File keystoreFile = file(props['STORE_FILE'])
            if(android.signingConfigs.hasProperty('release')){
                android.signingConfigs['release'].storeFile = keystoreFile
                android.signingConfigs['release'].storePassword = props['KEY_STORE_PW']
                android.signingConfigs['release'].keyAlias = props['KEY_STORE_RELEASE_ALIAS']
                android.signingConfigs['release'].keyPassword = props['KEY_STORE_RELEASE_PW']
            }
            if(android.signingConfigs.hasProperty('debug')){
                android.signingConfigs['debug'].storeFile = keystoreFile
                android.signingConfigs['debug'].storePassword = props['KEY_STORE_PW']
                android.signingConfigs['debug'].keyAlias = props['KEY_STORE_DEBUG_ALIAS']
                android.signingConfigs['debug'].keyPassword = props['KEY_STORE_DEBUG_PW']
            }
        }
//        def apiKeyFile = rootProject.file('apikey.properties')
//        def propertiesFile = file('fabric.properties')

//        if(apiKeyFile.exists()){
//            def apiKeys = new Properties()
//            apiKeys.load(new FileInputStream(apiKeyFile))
//            android.defaultConfig.resValue "string", "FABRIC_KEY", apiKeys['FABRIC_API_KEY']
//            if (!propertiesFile.exists()) {
//                // 9 create fabric.properties file using gradle ant task
//                def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
//                ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
//                    entry(key: "apiSecret", value: apiKeys['FABRIC_BUILD_SECRET'])
//                    entry(key: "apiKey", value: apiKeys['FABRIC_API_KEY'])
//                }
//            }
//        }

    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile "junit:junit:$junit"
    compile "com.android.support:appcompat-v7:$globalSupportLibVersion"
    compile "com.android.support:cardview-v7:$globalSupportLibVersion"
    compile "com.android.support:design:$globalSupportLibVersion"
    compile "com.android.support:percent:$globalSupportLibVersion"
    compile "com.jakewharton.timber:timber:$timber"
    compile "com.google.code.gson:gson:$gson"

    compile "io.reactivex:rxjava:$rxjava"
    compile "io.reactivex:rxandroid:$rxandroid"
    compile "com.facebook.fresco:fresco:$fresco"
    compile "com.jakewharton:butterknife:$butterknife"
    compile "com.squareup.retrofit2:converter-gson:$retrofit"
    compile "com.squareup.retrofit2:retrofit:$retrofit"
    provided "com.squareup.dagger:dagger-compiler:$dagger"
    compile "com.squareup.dagger:dagger:$dagger"

    compile "com.jakewharton.rxrelay:rxrelay:$rxrelay"

    compile "io.realm:android-adapters:$realmadapter"

    compile "com.android.support.constraint:constraint-layout:$constraintlayout"
    releaseCompile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    debugCompile 'com.facebook.stetho:stetho:1.3.1'
    debugCompile 'com.uphyca:stetho_realm:0.9.0'
}
